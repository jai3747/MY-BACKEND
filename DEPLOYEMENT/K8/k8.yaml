
# apiVersion: v1
# kind: Secret
# metadata:
#   name: mongodb-secret
# type: Opaque
# stringData:
#   MONGO_URI: mongodb+srv://jayachandran:jc%403747%40jai@cluster0.w45he.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0

# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: mongodb-deployment
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: mongodb
#   template:
#     metadata:
#       labels:
#         app: mongodb
#     spec:
#       containers:
#       - name: mongodb
#         image: mongo:latest
#         ports:
#         - containerPort: 27017
#         volumeMounts:
#         - name: mongodb-data
#           mountPath: /data/db
#       volumes:
#       - name: mongodb-data
#         persistentVolumeClaim:
#           claimName: mongodb-data-claim

# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: mongodb-data-claim
# spec:
#   accessModes: [ "ReadWriteOnce" ]
#   resources:
#     requests:
#       storage: 1Gi

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: mongodb-service
# spec:
#   selector:
#     app: mongodb
#   ports:
#   - protocol: TCP
#     port: 27017
#     targetPort: 27017

# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: backend-deployment
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: backend
#   template:
#     metadata:
#       labels:
#         app: backend
#     spec:
#       containers:
#       - name: backend
#         image: jai3747/my-backend-app:v20
#         ports:
#         - containerPort: 5000
#         env:
#         - name: NODE_ENV
#           value: production
#         - name: PORT
#           value: "5000"
#         - name: MONGO_URI
#           valueFrom:
#             secretKeyRef:
#               name: mongodb-secret
#               key: MONGO_URI
#         readinessProbe:
#           httpGet:
#             path: /api/health
#             port: 5000
#           initialDelaySeconds: 10
#           periodSeconds: 5

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: backend-service
# spec:
#   type: LoadBalancer
#   selector:
#     app: backend
#   ports:
#   - protocol: TCP
#     port: 5000
#     targetPort: 5000

# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: nginx-config
# data:
#   nginx.conf: |
#     worker_processes auto;
#     error_log /var/log/nginx/error.log warn;
#     pid /tmp/nginx.pid;
    
#     events {
#         worker_connections 1024;
#     }
    
#     http {
#         include /etc/nginx/mime.types;
#         default_type application/octet-stream;
        
#         client_body_temp_path /tmp/client_temp;
#         proxy_temp_path /tmp/proxy_temp;
#         fastcgi_temp_path /tmp/fastcgi_temp;
#         uwsgi_temp_path /tmp/uwsgi_temp;
#         scgi_temp_path /tmp/scgi_temp;

#         server {
#             listen 8080;
#             root /usr/share/nginx/html;
#             index index.html;
            
#             location / {
#                 try_files $uri $uri/ /index.html;
#                 add_header Cache-Control "no-cache, no-store, must-revalidate";
#             }
            
#             location /api {
#                 proxy_pass http://34.100.172.207:5000;
#                 proxy_http_version 1.1;
#                 proxy_set_header Host $host;
#                 proxy_set_header X-Real-IP $remote_addr;
#                 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#                 proxy_set_header X-Forwarded-Proto $scheme;
#             }

#             location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
#                 expires 30d;
#                 add_header Cache-Control "public, no-transform";
#             }
#         }
#     }
# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: nginx-config
# data:
#   nginx.conf: |
#     worker_processes auto;
#     error_log /var/log/nginx/error.log warn;
#     pid /tmp/nginx.pid;
    
#     events {
#         worker_connections 1024;
#     }
    
#     http {
#         include /etc/nginx/mime.types;
#         default_type application/octet-stream;
        
#         client_body_temp_path /tmp/client_temp;
#         proxy_temp_path /tmp/proxy_temp;
#         fastcgi_temp_path /tmp/fastcgi_temp;
#         uwsgi_temp_path /tmp/uwsgi_temp;
#         scgi_temp_path /tmp/scgi_temp;

#         server {
#             listen 8080;
#             root /usr/share/nginx/html;
#             index index.html;
            
#             location / {
#                 try_files $uri $uri/ /index.html;
#                 add_header Cache-Control "no-cache, no-store, must-revalidate";
#             }
            
#             location /api {
#                 proxy_pass http://34.100.172.207:5000;
#                 proxy_http_version 1.1;
#                 proxy_set_header Host $host;
#                 proxy_set_header X-Real-IP $remote_addr;
#                 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#                 proxy_set_header X-Forwarded-Proto $scheme;
#             }

#             location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
#                 expires 30d;
#                 add_header Cache-Control "public, no-transform";
#             }
#         }
#     }

# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: frontend-deployment
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: frontend
#   template:
#     metadata:
#       labels:
#         app: frontend
#     spec:
#       containers:
#       - name: frontend
#         image: jai3747/my-frontend-app:v20  # Update this with your new image after rebuilding
#         ports:
#         - containerPort: 8080
#         env:
#         - name: REACT_APP_API_URL
#           value: "http://34.100.172.207:5000/api"
#         - name: REACT_APP_ENV
#           value: "production"
#         resources:
#           requests:
#             memory: "64Mi"
#             cpu: "100m"
#           limits:
#             memory: "128Mi"
#             cpu: "200m"
#         readinessProbe:
#           httpGet:
#             path: /
#             port: 8080
#           initialDelaySeconds: 10
#           periodSeconds: 5
#         livenessProbe:
#           httpGet:
#             path: /
#             port: 8080
#           initialDelaySeconds: 15
#           periodSeconds: 20
#         volumeMounts:
#         - name: nginx-config
#           mountPath: /etc/nginx/nginx.conf
#           subPath: nginx.conf
#         - name: nginx-temp
#           mountPath: /tmp
#         - name: nginx-cache
#           mountPath: /var/cache/nginx
#         - name: nginx-run
#           mountPath: /var/run
#         securityContext:
#           runAsUser: 101
#           runAsGroup: 101
#           runAsNonRoot: true
#       volumes:
#       - name: nginx-config
#         configMap:
#           name: nginx-config
#       - name: nginx-temp
#         emptyDir: {}
#       - name: nginx-cache
#         emptyDir: {}
#       - name: nginx-run
#         emptyDir: {}

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: frontend-service
# spec:
#   type: LoadBalancer
#   selector:
#     app: frontend
#   ports:
#   - protocol: TCP
#     port: 80
#     targetPort: 8080
# mongodb-deployment.yaml
apiVersion: v1
kind: Secret
metadata:
  name: mongodb-secret
type: Opaque
stringData:
  MONGO_URI: ${MONGODB_URI}  # Will be replaced by GitHub Actions

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:latest
        ports:
        - containerPort: 27017
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: mongodb-data
        persistentVolumeClaim:
          claimName: mongodb-data-claim

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-data-claim
spec:
  accessModes: [ "ReadWriteOnce" ]
  resources:
    requests:
      storage: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
spec:
  selector:
    app: mongodb
  ports:
  - protocol: TCP
    port: 27017
    targetPort: 27017

---
# backend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: ${DOCKER_USERNAME}/my-backend-app:${TAG}
        ports:
        - containerPort: 5000
        env:
        - name: NODE_ENV
          value: production
        - name: PORT
          value: "5000"
        - name: MONGO_URI
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: MONGO_URI
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        readinessProbe:
          httpGet:
            path: /api/health
            port: 5000
          initialDelaySeconds: 10
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /api/health
            port: 5000
          initialDelaySeconds: 15
          periodSeconds: 20

---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
spec:
  type: LoadBalancer
  selector:
    app: backend
  ports:
  - protocol: TCP
    port: 5000
    targetPort: 5000

---
# frontend-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  nginx.conf: |
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /tmp/nginx.pid;
    
    events {
        worker_connections 1024;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        client_body_temp_path /tmp/client_temp;
        proxy_temp_path /tmp/proxy_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;

        server {
            listen 8080;
            root /usr/share/nginx/html;
            index index.html;
            
            location / {
                try_files $uri $uri/ /index.html;
                add_header Cache-Control "no-cache, no-store, must-revalidate";
            }
            
            location /api {
                proxy_pass http://backend-service:5000;
                proxy_http_version 1.1;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
                expires 30d;
                add_header Cache-Control "public, no-transform";
            }
        }
    }

---
# frontend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: ${DOCKER_USERNAME}/my-frontend-app:${TAG}
        ports:
        - containerPort: 8080
        env:
        - name: REACT_APP_API_URL
          value: "/api"
        - name: REACT_APP_ENV
          value: "production"
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 20
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: nginx-temp
          mountPath: /tmp
        - name: nginx-cache
          mountPath: /var/cache/nginx
        - name: nginx-run
          mountPath: /var/run
        securityContext:
          runAsUser: 101
          runAsGroup: 101
          runAsNonRoot: true
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: nginx-temp
        emptyDir: {}
      - name: nginx-cache
        emptyDir: {}
      - name: nginx-run
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
spec:
  type: LoadBalancer
  selector:
    app: frontend
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
