
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: mongodb-data-claim
# spec:
#   accessModes:
#     - ReadWriteOnce
#   storageClassName: standard-rwo
#   resources:
#     requests:
#       storage: 10Gi

# ---
# apiVersion: apps/v1
# kind: StatefulSet
# metadata:
#   name: mongodb-deployment
# spec:
#   serviceName: mongodb-service
#   replicas: 1
#   selector:
#     matchLabels:
#       app: mongodb
#   template:
#     metadata:
#       labels:
#         app: mongodb
#     spec:
#       securityContext:
#         fsGroup: 999
#       containers:
#       - name: mongodb
#         image: mongo:6.0.12
#         command:
#         - "mongod"
#         - "--bind_ip_all"
#         - "--auth"
#         ports:
#         - containerPort: 27017
#         volumeMounts:
#         - name: mongodb-data
#           mountPath: /data/db
#         resources:
#           requests:
#             memory: "256Mi"
#             cpu: "200m"
#           limits:
#             memory: "512Mi"
#             cpu: "500m"
#         env:
#         - name: MONGO_INITDB_ROOT_USERNAME
#           valueFrom:
#             secretKeyRef:
#               name: mongodb-secret
#               key: MONGO_USERNAME
#         - name: MONGO_INITDB_ROOT_PASSWORD
#           valueFrom:
#             secretKeyRef:
#               name: mongodb-secret
#               key: MONGO_PASSWORD
#       volumes:
#       - name: mongodb-data
#         persistentVolumeClaim:
#           claimName: mongodb-data-claim

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: mongodb-service
# spec:
#   selector:
#     app: mongodb
#   ports:
#   - protocol: TCP
#     port: 27017
#     targetPort: 27017

# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: backend-deployment
# spec:
#   replicas: 2
#   selector:
#     matchLabels:
#       app: backend
#   template:
#     metadata:
#       labels:
#         app: backend
#     spec:
#       containers:
#       - name: backend
#         image: ${DOCKER_USERNAME}/my-backend-app:${GITHUB_SHA}
#         ports:
#         - containerPort: 5000
#         env:
#         - name: NODE_ENV
#           value: production
#         - name: PORT
#           value: "5000"
#         - name: MONGO_URI
#           valueFrom:
#             secretKeyRef:
#               name: mongodb-secret
#               key: MONGO_URI
#         resources:
#           requests:
#             memory: "128Mi"
#             cpu: "100m"
#           limits:
#             memory: "256Mi"
#             cpu: "200m"
#         readinessProbe:
#           httpGet:
#             path: /api/health
#             port: 5000
#           initialDelaySeconds: 30
#           periodSeconds: 10
#           timeoutSeconds: 5
#         livenessProbe:
#           httpGet:
#             path: /api/health
#             port: 5000
#           initialDelaySeconds: 60
#           periodSeconds: 20
#           timeoutSeconds: 5

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: backend-service
# spec:
#   type: LoadBalancer
#   selector:
#     app: backend
#   ports:
#   - protocol: TCP
#     port: 5000
#     targetPort: 5000

# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: frontend-deployment
# spec:
#   replicas: 2
#   selector:
#     matchLabels:
#       app: frontend
#   template:
#     metadata:
#       labels:
#         app: frontend
#     spec:
#       containers:
#       - name: frontend
#         image: ${DOCKER_USERNAME}/my-frontend-app:${GITHUB_SHA}
#         ports:
#         - containerPort: 8080
#         env:
#         - name: REACT_APP_API_URL
#           value: "/api"
#         - name: REACT_APP_ENV
#           value: "production"
#         resources:
#           requests:
#             memory: "64Mi"
#             cpu: "100m"
#           limits:
#             memory: "128Mi"
#             cpu: "200m"
#         readinessProbe:
#           httpGet:
#             path: /
#             port: 8080
#           initialDelaySeconds: 30
#           periodSeconds: 10
#         livenessProbe:
#           httpGet:
#             path: /
#             port: 8080
#           initialDelaySeconds: 60
#           periodSeconds: 20

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: frontend-service
# spec:
#   type: LoadBalancer
#   selector:
#     app: frontend
#   ports:
#   - protocol: TCP
#     port: 80
#     targetPort: 8080
